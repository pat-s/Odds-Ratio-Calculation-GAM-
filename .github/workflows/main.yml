on:
  push:
  pull_request:
  # for now, CRON jobs only run on the default branch of the repo (i.e. usually on master)
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 3 * * *"

name: R CMD Check via {tic}

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          # comment out lines if you do not want to build on certain platforms
          - { os: windows-latest, r: "release" }
          - { os: macOS-latest, r: "release" }
          - { os: macOS-latest, r: "devel" }
          - { os: ubuntu-18.04, r: "release" }

    env:
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      # we are not allowed to write to ~/.ccache on GH Actions
      # setting some ccache options
      CCACHE_BASEDIR: ${{ GITHUB.WORKSPACE }}
      CCACHE_DIR: ${{ GITHUB.WORKSPACE }}/.ccache
      CCACHE_NOHASHDIR: true
      CCACHE_SLOPPINESS: include_file_ctime
      # make sure to run `tic::use_ghactions_deploy()` to set up deployment
      TIC_DEPLOY_KEY: ${{ secrets.TIC_DEPLOY_KEY }}
      # prevent rgl issues because no X11 display is available
      RGL_USE_NULL: true

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          Ncpus: 4

      # LaTeX. Installation time:
      # Linux: ~ 1 min
      # macOS: ~ 1 min 30s
      # Windows: never finishes
      - uses: r-lib/actions/setup-tinytex@v1
        if: runner.os != 'Windows'

      - uses: r-lib/actions/setup-pandoc@master

      # set date/week for use in cache creation
      # https://github.community/t5/GitHub-Actions/How-to-set-and-access-a-Workflow-variable/m-p/42970
      # - cache R packages daily
      # - cache ccache weekly -> 'ccache' helps rebuilding the package cache faster
      - name: "[Cache] Prepare daily timestamp for cache"
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date '+%d-%m')"

      - name: "[Cache] Prepare weekly timestamp for cache"
        if: runner.os != 'Windows'
        id: datew
        run: echo "::set-output name=datew::$(date '+%Y-%V')"

      - name: "[Cache] Cache R packages"
        uses: actions/cache@v1.1.0
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}

      - name: "[Cache] Cache ccache"
        uses: actions/cache@v1.1.0
        with:
          path: ${{ env.CCACHE_DIR}}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-test6-${{steps.datew.outputs.datew}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-test6-${{steps.datew.outputs.datew}}

      # install ccache and write config file
      - name: "[Linux] ccache"
        if: runner.os == 'Linux'
        run: |
          sudo apt install ccache libcurl4-openssl-dev
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars

      # install ccache and write config file
      - name: "[macOS] ccache"
        if: runner.os == 'macOS'
        run: |
          brew install ccache
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache /usr/bin/clang\nCC11=ccache /usr/bin/clang\nCC14=ccache /usr/bin/clang\nCXX=ccache /usr/bin/clang++\nCXX11=ccache /usr/bin/clang++\nCXX14=ccache /usr/bin/clang++\nC11=ccache /usr/bin/clang++\nC14=ccache /usr/bin/clang++\nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk' > $HOME/.R/Makevars

      # for some strange Windows reason this step and the next one need to be decoupled
      - name: "[Stage] Prepare"
        run: |
          Rscript -e "if (!requireNamespace('remotes')) {install.packages('remotes')}"
          Rscript -e "if (getRversion() < '3.2' && !requireNamespace('curl')) {install.packages('curl')}"

      - name: "[Stage] Install"
        if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
        run: |
          Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      # macOS devel needs its own stage because we need to work with an env var to suppress the usage of binaries
      # the envvar is picked up and set via `options(pkgType)`
      - name: "[Stage] Install (macOS-devel)"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'devel'
        env:
          pkgType: source
        run: |
          Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: "[Stage] Script"
        run: Rscript -e 'tic::script()'

      - name: "[Stage] After Success"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == '3.6'
        run: Rscript -e "tic::after_success()"

      - name: "[Stage] Upload R CMD check artifacts"
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
      - uses: chrnorm/deployment-action@v1.1.1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: production

      - name: "[Stage] Before Deploy"
        run: |
          Rscript -e "tic::before_deploy()"

      - name: "[Stage] Deploy"
        run: Rscript -e "tic::deploy()"

      - name: "[Stage] After Deploy"
        run: Rscript -e "tic::after_deploy()"

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target-url: http://my-app-url.com
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target-url: http://my-app-url.com
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
